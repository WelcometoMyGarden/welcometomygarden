/// <reference types="@sveltejs/kit" />
/// <reference no-default-lib="true"/>
/// <reference lib="esnext" />
/// <reference lib="webworker" />
// See https://kit.svelte.dev/docs/service-workers#type-safety
const sw = self as unknown as ServiceWorkerGlobalScope;

// The goal of this service worker is to speed up loading by caching static assets
//
// In `vite dev` (`yarn dev`) mode, the service worker might not be loaded in all browsers.
// See the docs linked above (browsers require module support for service workers, recent Chrome versions do)

// The docs of the `build` and `files` arrays are confusing. The "URLs" specified
// are pathnames like `/images/icons/tent-white.svg`, not fully qualified URLs.
import { build as buildPathnames, files as filePathnames, version } from '$service-worker';

const VERSIONED_CACHE_NAME = `cache-${version}`;

// hard-coded list of other assets necessary for page load outside our domain
const CUSTOM_ASSETS_FULL_HREF: string[] = [
  'https://fonts.googleapis.com/css2?family=Inknut+Antiqua&family=Montserrat:wght@400;500;600;700&display=swap'
];

// `build` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
// `version` is the current version of the app

const prependOrigin = (assets: string[]) => assets.map((f) => sw.location.origin + f);

// We filter the files because we don't want to cache
// (they're big and largely unused)
const customFileFilter = (pathName: string) => {
  if (
    // Referenced from an unused component (SlowTravelMiniFestival)
    pathName.startsWith('/images/workshops/') ||
    // Temporarily disabled feature, ~5MB file
    pathName.startsWith('/stations.geojson')
  )
    return false;
  return true;
};

// also, we add the domain to our assets, so we can differentiate routes of our
// app from those of other apps that we cache
const INTERNAL_ASSETS_FULL_HREF = prependOrigin([
  ...filePathnames.filter(customFileFilter),
  ...buildPathnames
]);

const ASSETS_TO_CACHE_FULL_HREF = [...INTERNAL_ASSETS_FULL_HREF, ...CUSTOM_ASSETS_FULL_HREF];
const ASSETS_TO_CACHE_FULL_HREF_SET = new Set(ASSETS_TO_CACHE_FULL_HREF);

sw.addEventListener('install', (event) => {
  // Ensure that updates to the service worker take effect immediately for both the current client and all other active clients.
  // https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerGlobalScope/skipWaiting#examples
  // https://felixgerschau.com/service-worker-lifecycle-update/#selfskipwaiting
  event.waitUntil(sw.skipWaiting());

  // Create a new cache and add all files to it
  async function preCacheFiles() {
    const cache = await caches.open(VERSIONED_CACHE_NAME);
    try {
      await cache.addAll(ASSETS_TO_CACHE_FULL_HREF);
    } catch (e) {
      console.error('Error on sw install pre-caching', e);
    }
  }

  event.waitUntil(preCacheFiles());
});

sw.addEventListener('activate', (event) => {
  // Remove previous cached data from disk
  async function deleteOldCaches() {
    for (const key of await caches.keys()) {
      if (key !== VERSIONED_CACHE_NAME) {
        await caches.delete(key);
      }
    }
  }
  event.waitUntil(deleteOldCaches());
  // https://felixgerschau.com/service-worker-lifecycle-update/#selfclientsclaim
  event.waitUntil(sw.clients.claim());
});

sw.addEventListener('fetch', (event) => {
  const url = new URL(event.request.url);

  // Only attempt to retrieve designated assets from the cache
  const alwaysServeHrefFromCache = ASSETS_TO_CACHE_FULL_HREF_SET.has(url.href);

  if (!(event.request.method === 'GET' && alwaysServeHrefFromCache)) {
    // Ignore this fetch
    return;
  }

  async function respondWithCachedAsset() {
    // We can assume that these assets were added to the cache
    // by the "install" event
    const match = await caches.match(event.request);
    if (match) {
      return match;
    } else {
      console.warn(`service worker: unexpected cache miss for ${url.href}`);
    }

    // Fallback in case of a problem
    return fetch(event.request);
  }

  event.respondWith(respondWithCachedAsset());
});
